@model QuizApplication.Models.Questions

@{
    var question = ViewBag.Question;
    Layout = "_Layout";
    TempData["UserType"] = "student";
}

<div class="card">
    <div class="row">
        <div class="col-12">
            <br />
            <form asp-action="SubmitAnswer" method="post">
                <div>
                    <h5 style="text-align:center;color:white;">Question @Model.Question_Id</h5>
                    <br />
                    <div style="display: flex; justify-content: space-between; color: white;">
                        <h6>Total Question: @ViewBag.maxquestion</h6>
                        <h6>Time Remaining: <span id="countdown">15:00</span></h6>
                    </div>
                    <p id="endMessage" style="display:none; color:red;">Time's up! Redirecting...</p>
                    <div class="container p-3 my-3  text-black" style="background-color:floralwhite; border-radius: 15px; box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3);">
                        @* #8ca3a3; *@

                        <h5 style="text-align:left"><p>@Model.QuestionText</p></h5>
                    </div>
                    <div>
                        <input type="hidden" name="count" value="@ViewBag.TotalScore" />
                        <input type="hidden" name="Id" value="@Model.Question_Id" />
                        <ul>
                            <div class="container p-3 my-3  text-black" style="width:500px;background-color:white; border-radius: 15px; ">
                                @Html.RadioButtonFor(m => m.Selected_OP, "A") @Model.Ques_OPA
                            </div>
                            <div class="container p-3 my-3  text-black" style="width:500px;background-color:white; border-radius: 15px;">
                                @Html.RadioButtonFor(m => m.Selected_OP, "B") @Model.Ques_OPB
                            </div>
                            <div class="container p-3 my-3  text-black" style="width:500px;background-color:white; border-radius: 15px;">
                                @Html.RadioButtonFor(m => m.Selected_OP, "C") @Model.Ques_OPC
                            </div>@* bg-dark *@
                            <div class="container p-3 my-3  text-black" style="width:500px;background-color:white; border-radius: 15px;">
                                @Html.RadioButtonFor(m => m.Selected_OP, "D") @Model.Ques_OPD
                            </div>
                        </ul>
                    </div>

                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <input type="submit" value="<< Previous" name="actions" class="btn btn-info" style="width:100px; border-radius: 15px;" />
                        <input type="submit" value="Next >>" name="actions" class="btn btn-info" style="width:100px; border-radius: 15px;" />
                    </div>
                </div>
            </form>
        </div>
    </div>

</div>



<style>

    body {
        /*  background-color: cadetblue; */
        background-image: url('/homepageimage/qqq8.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    .card {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        transition: 0.3s;
        width: 700px;
        height: auto;
        margin: 5% auto;
        /* background-color: white;  */
        background-color: transparent;
        /*  padding: 5px; */
        margin-top:5px;
        border-radius: 10px;
        box-sizing: border-box;
    }

        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
        }

    .column {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 5px;
    }

    .custom-width {
        width: 80%;
        max-width: 600px;
        margin: 0 auto;
        background-color: bisque;
    }
</style>

@{
    if (@TempData["msg"] != null)
    {
        <script>
            alert('@TempData["msg"]')
        </script>
    }
}


<script>
    function startTimer(duration, display) {
        var countdown = duration, minutes, seconds;
        var timerInterval = setInterval(function () {
            minutes = parseInt(countdown / 60, 10);
            seconds = parseInt(countdown % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = minutes + ":" + seconds;

            // Save the current countdown time to localStorage
            localStorage.setItem("countdown", countdown);

            if (--countdown < 0) {
                clearInterval(timerInterval); // Stop the timer
                localStorage.removeItem("countdown"); // Clear the saved countdown time
                window.location.href = "/QuizHome/checkanswer_beforesubmit";
            }
        }, 1000);
    }

    window.onload = function () {
        var fifteenMinutes = 60 * 15,
            display = document.querySelector('#countdown');

        // Retrieve the remaining countdown time from localStorage if available
        var savedCountdown = localStorage.getItem("countdown");

        // If there's a saved countdown time, use it. Otherwise, use the initial 15 minutes.
        var countdownTime = savedCountdown ? parseInt(savedCountdown, 10) : fifteenMinutes;

        startTimer(countdownTime, display);
    };
    function logout() {
        var fifteenMinutes = 60 * 15,
        display = document.querySelector('#countdown');
        // Clear countdown time from localStorage
        localStorage.removeItem("countdown");
        startTimer(fifteenMinutes, display);
    }
</script>
